process {
    // bcftools filters
    withName: MAX_ALLELE_LENGTH {
        publishDir = [
            path: { "${params.outdir}/test_filter" },
            mode: params.publish_dir_mode
        ]
        ext.prefix = { "${meta.id}_${meta.filter}_filter" }
        ext.args = {
            [
                [
                    '-i "',
                    [
                        params.max_allele_length ? "(LEN < ${params.max_allele_length})" : ""
                    ].findAll{ it != "" }.join(' & ').trim(),
                    '"'
                ].join('').trim(),
                "--output-type z",
                "--write-index=tbi"
            ].join(' ').trim()
        }
    }
    withName: QUALITY_DEPTH_RATIO {
        publishDir = [
            path: { "${params.outdir}/test_filter" },
            mode: params.publish_dir_mode
        ]
        ext.prefix = { "${meta.id}_${meta.filter}_filter" }
        ext.args = {
            [
                [
                    '-i "',
                    [
                        params.quality_depth_ratio ? "((QUAL / (INFO/DP)) > ${params.quality_depth_ratio})" : ""
                    ].findAll{ it != "" }.join(' & ').trim(),
                    '"'
                ].join('').trim(),
                "--output-type z",
                "--write-index=tbi"
            ].join(' ').trim()
        }
    }
    withName: MIN_QUALITY {
        publishDir = [
            path: { "${params.outdir}/test_filter" },
            mode: params.publish_dir_mode
        ]
        ext.prefix = { "${meta.id}_${meta.filter}_filter" }
        ext.args = {
            [
                [
                    '-i "',
                    [
                        params.min_quality ? "(QUAL > ${params.min_quality})" : ""
                    ].findAll{ it != "" }.join(' & ').trim(),
                    '"'
                ].join('').trim(),
                "--output-type z",
                "--write-index=tbi"
            ].join(' ').trim()
        }
    }
    withName: VARIANT_TYPE {
        publishDir = [
            path: { "${params.outdir}/test_filter" },
            mode: params.publish_dir_mode
        ]
        ext.prefix = { "${meta.id}_${meta.filter}_filter" }
        ext.args = {
            [
                [
                    '-i "',
                    [
                        params.variant_type ? "(TYPE == \\\"${params.variant_type}\\\")" : ""
                    ].findAll{ it != "" }.join(' & ').trim(),
                    '"'
                ].join('').trim(),
                "--output-type z",
                "--write-index=tbi"
            ].join(' ').trim()
        }
    }
    withName: MISPAIRED_READS {
        publishDir = [
            path: { "${params.outdir}/test_filter" },
            mode: params.publish_dir_mode
        ]
        ext.prefix = { "${meta.id}_${meta.filter}_filter" }
        ext.args = {
            [
                [
                    '-i "',
                    [
                        params.mispaired_reads ? "((PAIRED > 0.05) & (PAIREDR > 0.05) & ((PAIREDR / PAIRED) < 1.75) & ((PAIREDR / PAIRED) > 0.25))" : ""
                    ].findAll{ it != "" }.join(' & ').trim(),
                    '"'
                ].join('').trim(),
                "--output-type z",
                "--write-index=tbi"
            ].join(' ').trim()
        }
    }
    withName: ALTERNATE_OBSERVATIONS {
        publishDir = [
            path: { "${params.outdir}/test_filter" },
            mode: params.publish_dir_mode
        ]
        ext.prefix = { "${meta.id}_${meta.filter}_filter" }
        ext.args = {
            [
                [
                    '-i "',
                    [
                        params.min_alternate_observations ? "(INFO/AO > ${params.min_alternate_observations})" : ""
                    ].findAll{ it != "" }.join(' & ').trim(),
                    '"'
                ].join('').trim(),
                "--output-type z",
                "--write-index=tbi"
            ].join(' ').trim()
        }
    }
    withName: MIN_MAPPING_QUALITY {
        publishDir = [
            path: { "${params.outdir}/test_filter" },
            mode: params.publish_dir_mode
        ]
        ext.prefix = { "${meta.id}_${meta.filter}_filter" }
        ext.args = {
            [
                [
                    '-i "',
                    [
                        params.min_mapping_quality ? "(MQM > ${params.min_mapping_quality})" : ""
                    ].findAll{ it != "" }.join(' & ').trim(),
                    '"'
                ].join('').trim(),
                "--output-type z",
                "--write-index=tbi"
            ].join(' ').trim()
        }
    }
    withName: MAPPING_RATIO {
        publishDir = [
            path: { "${params.outdir}/test_filter" },
            mode: params.publish_dir_mode
        ]
        ext.prefix = { "${meta.id}_${meta.filter}_filter" }
        ext.args = {
            [
                [
                    '-i "',
                    [
                        params.min_mapping_ratio ? "((MQM / MQMR) > ${params.min_mapping_ratio})" : "",
                        params.max_mapping_ratio ? "((MQM / MQMR) < ${params.max_mapping_ratio})" : ""
                    ].findAll{ it != "" }.join(' & ').trim(),
                    '"'
                ].join('').trim(),
                "--output-type z",
                "--write-index=tbi"
            ].join(' ').trim()
        }
    }
    withName: MIN_DEPTH {
        publishDir = [
            path: { "${params.outdir}/test_filter" },
            mode: params.publish_dir_mode
        ]
        ext.prefix = { "${meta.id}_${meta.filter}_filter" }
        ext.args = {
            [
                [
                    '-i "',
                    [
                        params.min_depth ? "(INFO/DP > ${params.min_depth})" : ""
                    ].findAll{ it != "" }.join(' & ').trim(),
                    '"'
                ].join('').trim(),
                "--output-type z",
                "--write-index=tbi"
            ].join(' ').trim()
        }
    }
    withName: MIN_POOLS {
        publishDir = [
            path: { "${params.outdir}/test_filter" },
            mode: params.publish_dir_mode
        ]
        ext.prefix = { "${meta.id}_${meta.filter}_filter" }
        ext.args = {
            [
                [
                    '-i "',
                    [
                        params.min_pools ? "(NS > ${params.min_pools})" : ""
                    ].findAll{ it != "" }.join(' & ').trim(),
                    '"'
                ].join('').trim(),
                "--output-type z",
                "--write-index=tbi"
            ].join(' ').trim()
        }
    }
    withName: READ_BALANCE {
        publishDir = [
            path: { "${params.outdir}/test_filter" },
            mode: params.publish_dir_mode
        ]
        ext.prefix = { "${meta.id}_${meta.filter}_filter" }
        ext.args = {
            [
                [
                    '-i "',
                    [
                        params.read_balance_left ? "(RPL > ${params.read_balance_left})" : "",
                        params.read_balance_right ? "(RPR > ${params.read_balance_right})" : ""
                    ].findAll{ it != "" }.join(' & ').trim(),
                    '"'
                ].join('').trim(),
                "--output-type z",
                "--write-index=tbi"
            ].join(' ').trim()
        }
    }

    // vcftools filters
    withName: MAX_MEAN_DEPTH {
        publishDir = [
            path: { "${params.outdir}/test_filter" },
            mode: params.publish_dir_mode
        ]
        ext.prefix = { "${meta.id}_${meta.filter}_filter" }
        ext.args = { [
            "--recode --recode-INFO-all",
            params.max_mean_depth ? "--max-meanDP ${params.max_mean_depth}" : ""
        ].join(' ').trim() }
    }
    withName: MIN_MEAN_DEPTH {
        publishDir = [
            path: { "${params.outdir}/test_filter" },
            mode: params.publish_dir_mode
        ]
        ext.prefix = { "${meta.id}_${meta.filter}_filter" }
        ext.args = { [
            "--recode --recode-INFO-all",
            params.min_mean_depth ? "--min-meanDP ${params.min_mean_depth}" : ""
        ].join(' ').trim() }
    }
    withName: HWE_CUTOFF {
        publishDir = [
            path: { "${params.outdir}/test_filter" },
            mode: params.publish_dir_mode
        ]
        ext.prefix = { "${meta.id}_${meta.filter}_filter" }
        ext.args = { [
            params.hwe_cutoff ? "--hwe ${params.hwe_cutoff}" : ""
        ].join(' ').trim() }
    }
    withName: MINOR_ALLELE_COUNT {
        publishDir = [
            path: { "${params.outdir}/test_filter" },
            mode: params.publish_dir_mode
        ]
        ext.prefix = { "${meta.id}_${meta.filter}_filter" }
        ext.args = { [
            "--recode --recode-INFO-all",
            params.min_minor_allele_count ? "--mac ${params.min_minor_allele_count}" : ""
        ].join(' ').trim() }
    }
    withName: MAX_MISSING {
        publishDir = [
            path: { "${params.outdir}/test_filter" },
            mode: params.publish_dir_mode
        ]
        ext.prefix = { "${meta.id}_${meta.filter}_filter" }
        ext.args = { [
            "--recode --recode-INFO-all",
            params.max_missing ? "--max-missing ${params.max_missing}" : ""
        ].join(' ').trim() }
    }
    withName: THIN {
        publishDir = [
            path: { "${params.outdir}/test_filter" },
            mode: params.publish_dir_mode
        ]
        ext.prefix = { "${meta.id}_${meta.filter}_filter" }
        ext.args = { [
            "--recode --recode-INFO-all",
            params.thin_snps ? "--thin ${params.thin_snps}" : ""
        ].join(' ').trim() }
    }


    // ripgrep wrapper to count snps in a vcf
    // works whether zipped or not
    withName: 'COUNT_SNPS.*' {
        publishDir = [ path: { "${params.outdir}/count" } ]
        ext.prefix = { "${meta.filter}_filter_count" }
        ext.args = { [
            '-z',
            '-c',
            '-v'
        ].join(' ').trim() }
    }
}