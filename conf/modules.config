/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    // grenedalf options
    withName: GRENEDALF_FST  {
        // TODO: maybe include pool sizes here
        ext.args = { (
            [
                "--method ${params.fst_method}",
                "--window-type ${params.window_type}",
                "--filter-sample-min-count ${params.min_count}",
                "--filter-sample-min-read-depth ${params.min_coverage}",
                "--filter-sample-max-read-depth ${params.max_coverage}",
            ] + ( params.window_type == 'interval' ? [
                params.window_interval_width ? "--window-interval-width ${params.window_interval_width}" : "",
                params.window_interval_stride ? "--window-interval-stride ${params.window_interval_stride}" : ""
            ] : [] ) + ( params.window_type == 'queue' ? [
                params.window_queue_count ? "--window-queue-count ${params.window_queue_count}" : "",
                params.window_queue_stride ? "--window-queue-stride ${params.window_queue_stride}" : ""
            ] : [] ) + [
                params.window_region ? "--window-region ${params.window_region}" : "",
                params.window_region_skip_empty ? "--window-region-skip-empty" : "",
                !params.all_fst_columns ? "--no-extra-columns" : "",
                "--separator-char comma",
                "--na-entry NA"
            ]
        ).join(' ').trim() }
    }

    // popoolation2 options
    withName: POPOOLATION2_FST {
        ext.args =  { [
            "--min-count ${params.min_count}",
            "--min-coverage ${params.min_coverage}",
            "--min-covered-fraction ${params.min_covered_fraction}",
            "--max-coverage ${params.max_coverage}",
            "--window-size ${params.window_size}",
            "--step-size ${params.step_size}",
            params.suppress_noninformative ? "--suppress-noninformative" : ""
        ].join(' ').trim() }
        ext.args2 = { params.fst_headers }
    }

    // poolfstat options
    withName: POOLFSTAT_FST {
        ext.args = { [
            "--min-coverage ${params.min_coverage}",
            "--max-coverage ${params.max_coverage}",
            "--min-maf ${params.min_minor_allele_frequency}",
            "--window-size ${params.window_size}",
            params.keep_indel ? "--indels" : "",
            params.fst_headers ? "--headers": ""
        ].join(' ').trim() }
    }

    withName: POPOOLATION2_FISHERTEST  {
        ext.args = { [
            "--min-count ${params.min_count}",
            "--min-coverage ${params.min_coverage}",
            "--max-coverage ${params.max_coverage}",
            params.suppress_noninformative ? "--suppress-noninformative" : ""
        ].join(' ').trim() }
    }

    withName: VCFLIB_VCFFILTER {
        ext.prefix = { "filtered" }
        ext.args = { [
            params.filter ? [
                '-f "',
                [
                    params.min_mapping_quality ? "MQM > ${params.min_mapping_quality}" : "",
                    params.min_mapping_quality_ref ? "MQMR > ${params.min_mapping_quality_ref}" : "",
                    params.min_mapping_ratio ? "MQM / MQMR > ${params.min_mapping_ratio}" : "",
                    params.max_mapping_ratio ? "MQM / MQMR < ${params.max_mapping_ratio}" : "",
                    params.read_balance_left ? "RPL > ${params.read_balance_left}" : "",
                    params.read_balance_right ? "RPR > ${params.read_balance_right}" : "",
                    params.quality_depth_ratio ? "QUAL / DP > ${params.quality_depth_ratio}" : "",
                    params.mispaired_reads ? "PAIRED > 0.05 & PAIREDR > 0.05 & PAIREDR / PAIRED < 1.75 & PAIREDR / PAIRED > 0.25" : "",
                    params.min_pools ? "NS > ${params.min_pools}" : "",
                    params.min_depth ? "DP > ${params.min_depth}" : "",
                    params.max_allele_length ? "LEN < ${params.max_allele_length}" : "",
                    params.min_quality ? "QUAL > ${params.min_quality}" : "",
                    params.variant_type ? "TYPE = ${params.variant_type}" : "",
                    params.min_alternate_observations ? "AO > ${params.min_alternate_observations}" : ""
                ].findAll{ it != "" }.join(' & ').trim(),
                '"'
            ].join('').trim() : ""
        ].join(' ').trim() }
    }


    withName: VCFTOOLS  {
        ext.prefix = { 'filtered.vcf' }
        ext.args = { [
            "--recode --recode-INFO-all",
            params.max_missing ? "--max-missing ${params.max_missing}" : "",
            params.min_minor_allele_count ? "--mac ${params.min_minor_allele_count}" : "",
            params.min_mean_depth ? "--min-meanDP ${params.min_mean_depth}" : "",
            params.max_mean_depth ? "--max-meanDP ${params.max_mean_depth}" : "",
            params.hwe_cutoff ? "--hwe ${params.hwe_cutoff}" : ""
        ].join(' ').trim() }
    }

    withName: PREPSYNC {
        ext.args = { [
            params.keep_indel ? "--indels" : "",
            params.keep_multiallelic ? "--multiallelic" : "",
            params.popoolation2 || params.poolfstat ? "--split" : "",
            params.grenedalf ? "--combined --header" : ""
        ].join(' ').trim() }
    }

    withName: VCF_SAMPLES {
        ext.args = { "-l" }
        ext.prefix = { "sample_names" }
        ext.suffix = { "txt" }
    }

    withName: VCF_RENAME {
        ext.args2 = { "--output-type v" }
    }

}
