/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefx = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: RMARKDOWNNOTEBOOK {
        conda = 'bioconda::bioconductor-scpipe=1.0.0 conda-forge::r-knitr=1.20 conda-forge::r-readr=1.1.1 conda-forge::r-optparse=1.6.0 bioconda::bioconductor-scater=1.6.0 conda-forge::r-dt=0.4 bioconda::bioconductor-scran=1.6.2 conda-forge::r-rtsne=0.13 conda-forge::r-ggplot2=2.2.1 conda-forge::r-plotly=4.7.1 bioconda::bioconductor-rsubread=1.28.1 conda-forge::r-rmarkdown=1.10'
        container = { "${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?
        'https://depot.galaxyproject.org/singularity/mulled-v2-bc19ab06ed8076bdc128104014a8b93265bc0059:42392056c2ef4b84e30436c14317f7b334aa5095-0' :
        'biocontainers/mulled-v2-bc19ab06ed8076bdc128104014a8b93265bc0059:42392056c2ef4b84e30436c14317f7b334aa5095-0' }"}
        publishDir = [
            [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                pattern: '*.html'
            ]
        ]
    }

    withName: SPLIT_SYNC {
        ext.prefix = { "${meta.id}_" + meta.pools.keySet().sort().join("-") }
        ext.suffix = { "sync" }
        ext.args = {
            ( meta.pools
                .keySet()
                .sort()
                .withIndex()
                .collect{ k,i -> "-v col${i+1}='${k}'" } +
            [
                "-F \$'\\t'",
                "-v OFS='\\t'",
                """'
                NR == 1 {
                    for (i=1; i <= NF; i++) { cols[\$i]=i }
                    # print \$1, \$2, \$3, \$cols[col1], \$cols[col2]
                    next
                }
                NR > 1 { print \$1, \$2, \$3, \$cols[col1], \$cols[col2] }
                '"""
            ] ).join(' ').trim()
        }
    }

    // grenedalf frequency options
    withName: GRENEDALF_FREQUENCY {
        ext.args = { [
            "--allow-file-overwriting",
            "--write-sample-counts",
            "--write-sample-read-depth",
            "--write-total-counts",
            "--write-total-read-depth",
            "--write-total-frequency",
            "--write-invariants",
            "--separator-char tab"
        ].join(' ').trim() }
    }

    // grenedalf sync options
    withName: GRENEDALF_SYNC {
        ext.args = { [
            params.missing_zeroes ? "--no-missing-marker" : "",
            "--filter-total-snp-min-count ${params.min_count}",
            "--filter-sample-min-read-depth ${params.min_coverage}",
            "--filter-sample-max-read-depth ${params.max_coverage}"
        ].join(' ').trim() }
    }

    // grenedalf fst options
    withName: GRENEDALF_FST  {
        ext.args = { (
            [
                "--method ${params.fst_method}",
                "--window-type ${params.window_type}",
                // "--filter-sample-min-count ${params.min_count}",
                "--filter-total-snp-min-count ${params.min_count}",
                "--filter-sample-min-read-depth ${params.min_coverage}",
                "--filter-sample-max-read-depth ${params.max_coverage}",
            ] + ( params.window_type == 'interval' ? [
                params.window_size ? "--window-interval-width ${params.window_size}" : "",
                params.window_stride ? "--window-interval-stride ${params.window_stride}" : ""
            ] : [] ) + ( params.window_type == 'queue' ? [
                params.window_size ? "--window-queue-count ${params.window_size}" : "",
                params.window_stride ? "--window-queue-stride ${params.window_stride}" : ""
            ] : [] ) + [
                params.window_region ? "--window-region ${params.window_region}" : "",
                params.window_region_skip_empty ? "--window-region-skip-empty" : "",
                !params.all_fst_columns ? "--no-extra-columns" : "",
                "--separator-char tab",
                "--na-entry NA"
            ]
        ).join(' ').trim() }
    }

    // r script to merge frequency and fst results
    withName: JOINFREQ {
        ext.prefix = { "${meta.id}_" + meta.pools.keySet().sort().join("-") }
        ext.args = { [
            "--window-type ${params.window_type}",
            "--window-size ${params.window_size}",
            "--window-step ${params.window_stride}",
            "--min-count ${params.min_count}",
            "--min-coverage ${params.min_coverage}",
            "--max-coverage ${params.max_coverage}"
        ].join(' ').trim() }
    }

    // r-based fisher test options
    withName: FISHERTEST {
        ext.args =  { [
            "--window-type ${params.window_type}",
            "--min-count ${params.min_count}",
            "--min-coverage ${params.min_coverage}",
            "--max-coverage ${params.max_coverage}",
            "--window-size ${params.window_size}",
            "--window-step ${params.window_stride}"
        ].join(' ').trim() }
    }

    // popoolation2 fisher test options
    withName: POPOOLATION2_FISHERTEST {
        ext.args =  { [
            "--min-count ${params.min_count}",
            "--min-coverage ${params.min_coverage}",
            "--max-coverage ${params.max_coverage}",
            params.suppress_noninformative ? "--suppress-noninformative" : ""
        ].join(' ').trim() }
    }

    // popoolation2 fst options
    withName: POPOOLATION2_FST {
        ext.args =  { [
            "--min-count ${params.min_count}",
            "--min-coverage ${params.min_coverage}",
            "--min-covered-fraction ${params.min_covered_fraction}",
            "--max-coverage ${params.max_coverage}",
            "--window-size ${params.window_size}",
            "--step-size ${params.window_stride ? params.window_stride : params.window_size}",
            params.suppress_noninformative ? "--suppress-noninformative" : ""
        ].join(' ').trim() }
    }

    // poolfstat options
    withName: POOLFSTAT_FST {
        ext.args = { [
            "--min-coverage ${params.min_coverage}",
            "--max-coverage ${params.max_coverage}",
            "--min-count ${params.min_count}",
            "--min-maf ${params.min_minor_allele_frequency}",
            "--window-size ${params.window_size}",
            "--headers",
            params.keep_indel ? "--indels" : "",
        ].join(' ').trim() }
    }

    withName: COMPRESS_VCF {
        ext.args = { [
            "--output-type z",
            "--write-index=tbi"
        ].join(' ').trim() }
    }

    withName: BCFTOOLS_COMPRESS_INDEX_FILTERED  {
        ext.prefix = { "filtered_final" }
        ext.args = { [
            "--output-type z",
            "--write-index=tbi"
        ].join(' ').trim() }
    }

    withName: BCFTOOLS_FILTER {
        ext.prefix = { "bcftools_filtered" }
        ext.args = {
            def f = params.filter
            [
                f || params.match_allele_count ? [
                    '-i "',
                    [
                        params.match_allele_count ?
                            "(" + (0..<meta.pools.size())
                                .collect{ pool -> "(COUNT(AD[${pool}:*]) == (COUNT(REF) + COUNT(ALT)))" }
                                .join(" & ")  + ")" : "",
                        f && params.min_mapping_quality ? "(MQM > ${params.min_mapping_quality})" : "",
                        f && params.min_mapping_quality_ref ? "(MQMR > ${params.min_mapping_quality_ref})" : "",
                        f && params.min_mapping_ratio ? "((MQM / MQMR) > ${params.min_mapping_ratio})" : "",
                        f && params.max_mapping_ratio ? "((MQM / MQMR) < ${params.max_mapping_ratio})" : "",
                        f && params.read_balance_left ? "(RPL > ${params.read_balance_left})" : "",
                        f && params.read_balance_right ? "(RPR > ${params.read_balance_right})" : "",
                        f && params.quality_depth_ratio ? "((QUAL / (INFO/DP)) > ${params.quality_depth_ratio})" : "",
                        f && params.mispaired_reads ? "((PAIRED > 0.05) & (PAIREDR > 0.05) & ((PAIREDR / PAIRED) < 1.75) & ((PAIREDR / PAIRED) > 0.25))" : "",
                        f && params.min_pools ? "(NS > ${params.min_pools})" : "",
                        f && params.min_depth ? "(INFO/DP > ${params.min_depth})" : "",
                        f && params.max_allele_length ? "(LEN < ${params.max_allele_length})" : "",
                        f && params.min_quality ? "(QUAL > ${params.min_quality})" : "",
                        f && params.variant_type ? "(TYPE == \"${params.variant_type}\")" : "",
                        f && params.min_alternate_observations ? "(INFO/AO > ${params.min_alternate_observations})" : ""
                    ].findAll{ it != "" }.join(' & ').trim(),
                    '"'
                ].join('').trim() : "",
                "--output-type z",
                "--write-index=tbi"
            ].join(' ').trim()
        }
    }

    withName: THIN_SNPS  {
        ext.prefix = { "${meta.id}_vcftools_filtered_thinned" }
        ext.args = { [
            "--recode --recode-INFO-all",
            params.thin_snps ? "--thin ${params.thin_snps}" : ""
        ].join(' ').trim() }
    }

    withName: VCFTOOLS_FILTER  {
        ext.prefix = { "${meta.id}_vcftools_filtered" }
        ext.args = { [
            "--recode --recode-INFO-all",
            params.max_missing ? "--max-missing ${params.max_missing}" : "",
            params.min_minor_allele_count ? "--mac ${params.min_minor_allele_count}" : "",
            params.min_mean_depth ? "--min-meanDP ${params.min_mean_depth}" : "",
            params.max_mean_depth ? "--max-meanDP ${params.max_mean_depth}" : "",
            params.hwe_cutoff ? "--hwe ${params.hwe_cutoff}" : ""
        ].join(' ').trim() }
    }

    withName: VCF_SAMPLES {
        ext.args = { "-l" }
        ext.prefix = { "sample_names" }
        ext.suffix = { "txt" }
    }

    withName: VCF_RENAME {
        ext.args2 = { [
            "--output-type z",
            "--write-index=tbi"
        ].join(' ').trim() }
    }
}
