{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://raw.githubusercontent.com/nf-core/assesspool/main/nextflow_schema.json",
    "title": "nf-core/assesspool pipeline parameters",
    "description": "nextflow-enabled version of assessPool radseq processing pipeline",
    "type": "object",
    "$defs": {
        "input_output_options": {
            "title": "Input/output options",
            "type": "object",
            "fa_icon": "fas fa-terminal",
            "description": "Define where the pipeline should find input data and save output data.",
            "required": ["input", "outdir"],
            "properties": {
                "input": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "schema": "assets/schema_input.json",
                    "mimetype": "text/csv",
                    "pattern": "^\\S+\\.(csv|tsv)$",
                    "description": "Path to comma-separated file containing information about the samples in the experiment.",
                    "help_text": "You will need to create a design file with information about the samples in your experiment before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row. See [usage docs](https://nf-co.re/assesspool/usage#samplesheet-input).",
                    "fa_icon": "fas fa-file-csv"
                },
                "outdir": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure.",
                    "fa_icon": "fas fa-folder-open",
                    "default": "output"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for completion summary.",
                    "fa_icon": "fas fa-envelope",
                    "help_text": "Set this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits. If set in your user config file (`~/.nextflow/config`) then you don't need to specify this on the command line for every run.",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$"
                }
            }
        },
        "institutional_config_options": {
            "title": "Institutional config options",
            "type": "object",
            "fa_icon": "fas fa-university",
            "description": "Parameters used to describe centralised config profiles. These should not be edited.",
            "help_text": "The centralised nf-core configuration profiles use a handful of pipeline parameters to describe themselves. This information is then printed to the Nextflow log when you run a pipeline. You should not need to change these values when you run a pipeline.",
            "properties": {
                "custom_config_version": {
                    "type": "string",
                    "description": "Git commit id for Institutional configs.",
                    "default": "master",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "custom_config_base": {
                    "type": "string",
                    "description": "Base directory for Institutional configs.",
                    "default": "https://raw.githubusercontent.com/nf-core/configs/master",
                    "hidden": true,
                    "help_text": "If you're running offline, Nextflow will not be able to fetch the institutional config files from the internet. If you don't need them, then this is not a problem. If you do need them, you should download the files from the repo and tell Nextflow where to find them with this parameter.",
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_name": {
                    "type": "string",
                    "description": "Institutional config name.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_description": {
                    "type": "string",
                    "description": "Institutional config description.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_contact": {
                    "type": "string",
                    "description": "Institutional config contact information.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_url": {
                    "type": "string",
                    "description": "Institutional config URL link.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                }
            }
        },
        "generic_options": {
            "title": "Generic options",
            "type": "object",
            "fa_icon": "fas fa-file-import",
            "description": "Less common options for the pipeline, typically set in a config file.",
            "help_text": "These options are common to all nf-core pipelines and allow you to customise some of the core preferences for how the pipeline runs.\n\nTypically these options would be set in a Nextflow config file loaded for all pipeline runs, such as `~/.nextflow/config`.",
            "properties": {
                "version": {
                    "type": "boolean",
                    "description": "Display version and exit.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                },
                "publish_dir_mode": {
                    "type": "string",
                    "default": "symlink",
                    "description": "Method used to save pipeline results to output directory.",
                    "help_text": "The Nextflow `publishDir` option specifies which intermediate files should be saved to the output directory. This option tells the pipeline what method should be used to move these files. See [Nextflow docs](https://www.nextflow.io/docs/latest/process.html#publishdir) for details.",
                    "fa_icon": "fas fa-copy",
                    "enum": ["symlink", "rellink", "link", "copy", "copyNoFollow", "move"],
                    "hidden": true
                },
                "email_on_fail": {
                    "type": "string",
                    "description": "Email address for completion summary, only when pipeline fails.",
                    "fa_icon": "fas fa-exclamation-triangle",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$",
                    "help_text": "An email address to send a summary email to when the pipeline is completed - ONLY sent if the pipeline does not exit successfully.",
                    "hidden": true
                },
                "plaintext_email": {
                    "type": "boolean",
                    "description": "Send plain-text email instead of HTML.",
                    "fa_icon": "fas fa-remove-format",
                    "hidden": true
                },
                "monochrome_logs": {
                    "type": "boolean",
                    "description": "Do not use coloured log outputs.",
                    "fa_icon": "fas fa-palette",
                    "hidden": true
                },
                "hook_url": {
                    "type": "string",
                    "description": "Incoming hook URL for messaging service",
                    "fa_icon": "fas fa-people-group",
                    "help_text": "Incoming hook URL for messaging service. Currently, MS Teams and Slack are supported.",
                    "hidden": true
                },
                "validate_params": {
                    "type": "boolean",
                    "description": "Boolean whether to validate parameters against the schema at runtime",
                    "default": true,
                    "fa_icon": "fas fa-check-square",
                    "hidden": true
                },
                "pipelines_testdata_base_path": {
                    "type": "string",
                    "fa_icon": "far fa-check-circle",
                    "description": "Base URL or local path to location of pipeline test dataset files",
                    "default": "https://raw.githubusercontent.com/nf-core/test-datasets/",
                    "hidden": true
                },
                "trace_report_suffix": {
                    "type": "string",
                    "fa_icon": "far calendar",
                    "description": "Suffix to add to the trace report filename. Default is the date and time in the format yyyy-MM-dd_HH-mm-ss.",
                    "hidden": true
                }
            }
        },
        "filtering_options": {
            "title": "Filtering options",
            "type": "object",
            "description": "aw",
            "default": "",
            "properties": {
                "filter": {
                    "type": "boolean",
                    "description": "Filter VCF file prior to performating analyses."
                },
                "filter_only": {
                    "type": "boolean",
                    "description": "Generate filtering visualizations and stop."
                },
                "keep_indel": {
                    "type": "boolean",
                    "description": "Retain insertion/deletion sites."
                },
                "keep_multiallelic": {
                    "type": "boolean",
                    "description": "Retain multiallelic sites (may not be supported by all analysis methods)"
                },
                "max_missing": {
                    "type": "number",
                    "description": "Exclude sites on the basis of the proportion of missing data."
                },
                "min_minor_allele_count": {
                    "type": "integer",
                    "description": "Minimum minor allele count."
                },
                "min_mean_depth": {
                    "type": "number",
                    "description": "Minimum mean read depth."
                },
                "max_mean_depth": {
                    "type": "number",
                    "description": "Maximum mean read depth."
                },
                "hwe_cutoff": {
                    "type": "number",
                    "description": "p-value threshold for Hardy-Weinberg equlibrium test."
                },
                "thin_snps": {
                    "type": "boolean",
                    "description": "Thin sites so that no two sites are within the specified distance from one another."
                },
                "min_mapping_quality": {
                    "type": "number",
                    "description": "Minimum mapping quality of alternate alleles."
                },
                "min_mapping_quality_ref": {
                    "type": "number",
                    "description": "Minimum mapping quality of reference alleles."
                },
                "min_mapping_ratio": {
                    "type": "number",
                    "description": "Minimum mapping quality ratio of alternate to reference alleles."
                },
                "max_mapping_ratio": {
                    "type": "number",
                    "description": "Maximum mapping quality ratio of alternate to reference alleles."
                },
                "read_balance_left": {
                    "type": "integer",
                    "description": "Minimum reads placed left."
                },
                "read_balance_right": {
                    "type": "integer",
                    "description": "Minimum reads placed right."
                },
                "quality_depth_ratio": {
                    "type": "number",
                    "description": "Minimum quality/depth ratio."
                },
                "mispaired_reads": {
                    "type": "boolean",
                    "description": "Filter mispaired reads."
                },
                "min_pools": {
                    "type": "integer",
                    "description": "Minimum number of pools with data."
                },
                "min_depth": {
                    "type": "integer",
                    "description": "Minimum total read depth."
                },
                "max_allele_length": {
                    "type": "integer",
                    "description": "Maximum allele length"
                },
                "min_quality": {
                    "type": "number",
                    "description": "Minimum SNP quality"
                },
                "variant_type": {
                    "type": "string",
                    "description": "Variant type.",
                    "enum": ["ref", "snp", "mnp", "indel"]
                },
                "min_alternate_observations": {
                    "type": "integer",
                    "description": "Minimum observations of the alternate haplotype."
                },
                "visualize_filters": {
                    "type": "boolean",
                    "default": true,
                    "description": "Generate visualizations of VCF filtering results."
                }
            },
            "fa_icon": "fas fa-filter"
        },
        "f_statistic_options": {
            "title": "F-statistic options",
            "type": "object",
            "description": "",
            "default": "",
            "properties": {
                "popoolation2": {
                    "type": "boolean",
                    "description": "Calculate Fst using `popoolation2`"
                },
                "grenedalf": {
                    "type": "boolean",
                    "description": "Calculate Fst using `grenedalf`"
                },
                "poolfstat": {
                    "type": "boolean",
                    "description": "Calculate Fst using `poolfstat`"
                },
                "match_allele_count": {
                    "type": "boolean",
                    "description": "Only keep sites where with matching allele counts across all pools (if something goes wrong early on, try this option)."
                },
                "missing_zeroes": {
                    "type": "boolean",
                    "description": "Convert missing observations to zeroes."
                },
                "fisher_test_popoolation": {
                    "type": "boolean",
                    "description": "Perform Fisher's exact test using `popoolation2`."
                },
                "fisher_test": {
                    "type": "boolean",
                    "description": "Perform Fisher's exact test using built-in method."
                },
                "min_count": {
                    "type": "integer",
                    "default": 2,
                    "description": "(Fst calculation) Minimum base count for a nucleotide to be considered as an allele."
                },
                "min_coverage": {
                    "type": "integer",
                    "default": 10,
                    "description": "(Fst calculation) Minimum read depth expected for a position in a sample to be considered covered."
                },
                "max_coverage": {
                    "type": "integer",
                    "default": 1000,
                    "description": "(Fst calculation) Maximum read depth expected for a position in a sample to be considered covered"
                },
                "min_covered_fraction": {
                    "type": "number",
                    "default": 1,
                    "description": "(popoolation2) The minimum fraction of a window being between min_coverage and max_coverage in ALL samples."
                },
                "suppress_noninformative": {
                    "type": "boolean",
                    "description": "(popoolation2) Suppress noninformative sites."
                },
                "window_size": {
                    "type": "integer",
                    "default": 1,
                    "description": "(popoolation2/poolfstat Fst calculation) Sliding window size."
                },
                "window_stride": {
                    "type": "integer",
                    "default": 0
                },
                "min_minor_allele_frequency": {
                    "type": "integer",
                    "default": 0,
                    "description": "(poolfstat) Minimal allowed Minor Allele Frequency."
                },
                "fst_method": {
                    "type": "string",
                    "default": "kofler",
                    "description": "(grenedalf) Fst calculation method.",
                    "enum": ["unbiased-nei", "unbiased-hudson", "kofler", "karlsson"]
                },
                "window_type": {
                    "type": "string",
                    "default": "single",
                    "description": "(grenedalf) Fst calculation window type.",
                    "enum": ["interval", "queue", "single", "regions", "chromosomes", "genome"]
                },
                "window_region": {
                    "type": "boolean",
                    "description": "(grenedalf) Fst window region."
                },
                "window_region_list": {
                    "type": "string",
                    "description": "(grenedalf) Text file containing list of window regions.",
                    "format": "file-path"
                },
                "window_region_skip_empty": {
                    "type": "boolean",
                    "description": "(grenedalf) Skip empty window regions."
                },
                "all_fst_columns": {
                    "type": "boolean",
                    "description": "(grenedalf) Include extra columns in Fst ouput (e.g., position counts, etc.)."
                }
            }
        },
        "report_visualization_options": {
            "title": "Report/visualization options",
            "type": "object",
            "description": "",
            "default": "",
            "properties": {
                "report_min_coverage": {
                    "type": "integer",
                    "default": 10,
                    "description": "Minimum coverage cutoff for report visualizations."
                },
                "report_max_coverage": {
                    "type": "integer",
                    "default": 70,
                    "description": "Maximum coverage cutoff for report visualizations."
                },
                "report_coverage_step": {
                    "type": "integer",
                    "default": 10,
                    "description": "Report coverage cutoff step."
                }
            }
        }
    },
    "allOf": [
        {
            "$ref": "#/$defs/input_output_options"
        },
        {
            "$ref": "#/$defs/institutional_config_options"
        },
        {
            "$ref": "#/$defs/generic_options"
        },
        {
            "$ref": "#/$defs/filtering_options"
        },
        {
            "$ref": "#/$defs/f_statistic_options"
        },
        {
            "$ref": "#/$defs/report_visualization_options"
        }
    ]
}
